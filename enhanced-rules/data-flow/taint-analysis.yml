rules:
  - id: taint-source-user-input
    languages:
      - python
      - javascript
      - typescript
    message: |
      Taint source detected: User input from request body or parameters.
      Ensure proper validation and sanitization of user input.
    severity: INFO
    pattern: request.body

  - id: taint-propagation-processing
    languages:
      - python
      - javascript
      - typescript
    message: |
      Taint propagation: User input processed and passed to query.
      Track data flow to ensure security checks are applied.
    severity: INFO
    pattern: process($USER_INPUT)

  - id: sql-injection-risk
    languages:
      - python
      - javascript
      - typescript
      - java
    message: |
      SQL injection risk: User input directly concatenated into SQL query.
      Use parameterized queries to prevent SQL injection.
    severity: ERROR
    pattern: |
      "SELECT * FROM users WHERE id = " + $USER_INPUT

  - id: xss-risk
    languages:
      - python
      - javascript
      - typescript
    message: |
      XSS risk: User input directly assigned to innerHTML.
      Use safe DOM manipulation methods to prevent XSS.
    severity: ERROR
    pattern: element.innerHTML = $USER_INPUT

  - id: command-injection-risk
    languages:
      - python
      - javascript
      - typescript
      - java
    message: |
      Command injection risk: User input directly executed as system command.
      Use safe command execution methods with proper validation.
    severity: ERROR
    pattern: os.system($USER_INPUT)

  - id: path-traversal-risk
    languages:
      - python
      - javascript
      - typescript
      - java
    message: |
      Path traversal risk: User input used for file path without validation.
      Validate file paths to prevent directory traversal attacks.
    severity: ERROR
    pattern: open($USER_INPUT)