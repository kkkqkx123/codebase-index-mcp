rules:
  - id: sql-injection-string-concat
    languages:
      - python
    message: |
      SQL injection vulnerability: User input directly concatenated into SQL query string.
      Use parameterized queries or prepared statements.
    severity: ERROR
    pattern: $QUERY = "SELECT * FROM users WHERE id = " + $USER_INPUT

  - id: sql-injection-format-string
    languages:
      - python
    message: |
      SQL injection vulnerability: User input in format string without escaping.
      Use parameterized queries instead of string formatting.
    severity: ERROR
    pattern: $QUERY = "SELECT * FROM users WHERE id = {}".format($USER_INPUT)

  - id: sql-injection-prepared-statement
    languages:
      - python
    message: |
      Good practice: Using prepared statements to prevent SQL injection.
      Always use parameterized queries for user input.
    severity: INFO
    pattern: cursor.execute("SELECT * FROM users WHERE id = %s", [$USER_ID])

  - id: sql-injection-orm-usage
    languages:
      - python
    message: |
      Good practice: Using ORM to prevent SQL injection.
      ORM provides built-in protection against SQL injection.
    severity: INFO
    pattern: User.objects.filter(id=$USER_ID)