rules:
  # 1. Complex nested conditions detection
  - id: complex-nested-conditions
    message: "Complex nested conditions: if nesting deeper than 3 levels may cause poor code readability and maintenance difficulties"
    languages: [javascript, typescript]
    severity: WARNING
    pattern-either:
      - pattern: |
          if ($COND1) {
            if ($COND2) {
              if ($COND3) {
                if ($COND4) {
                  $BODY
                }
              }
            }
          }
      - pattern: |
          if ($COND1) {
            if ($COND2) {
              if ($COND3) {
                $BODY
              }
            }
          }
    metadata:
      category: control-flow
      technology: [cfg, complexity]
      subcategory: [nesting, maintainability]
      cwe: ["CWE-570"]
      confidence: MEDIUM
      impact: LOW

  # 2. Loop invariant code detection (JavaScript/TypeScript version)
  - id: loop-invariant-code-motion
    message: "Loop invariant code: computations that are executed inside a loop but yield the same result for each iteration can be moved out of the loop"
    languages: [javascript, typescript]
    severity: INFO
    pattern: |
      for ($INIT; $COND; $UPDATE) {
        ...
        $VAR = $EXPR;
        ...
      }
    metadata:
      category: control-flow
      technology: [cfg, optimization]
      subcategory: [performance, loop-optimization]
      confidence: LOW
      impact: MEDIUM

  # 3. Unreachable code detection (after return statement)
  - id: unreachable-code-after-return
    message: "Unreachable code: code after a return statement will never be executed"
    languages: [javascript, typescript]
    severity: WARNING
    pattern: |
      function $FUNC(...) {
        ...
        return $VALUE;
        $UNREACHABLE
        ...
      }
    metadata:
      category: control-flow
      technology: [cfg, dead-code]
      subcategory: [dead-code, logic-error]
      cwe: ["CWE-561"]
      confidence: HIGH
      impact: MEDIUM

  # 4. Unreachable code detection (after break statement)
  - id: unreachable-code-after-break
    message: "Unreachable code: code after a break statement will never be executed"
    languages: [javascript, typescript]
    severity: WARNING
    pattern: |
      while ($COND) {
        ...
        break;
        $UNREACHABLE
        ...
      }
    metadata:
      category: control-flow
      technology: [cfg, dead-code]
      subcategory: [dead-code, logic-error]
      cwe: ["CWE-561"]
      confidence: HIGH
      impact: MEDIUM

  # 5. Missing break in switch statement detection
  - id: switch-missing-break
    message: "Missing break in switch statement: may cause unintended case fallthrough behavior"
    languages: [javascript, typescript]
    severity: WARNING
    pattern: |
      switch ($EXPR) {
        case $VAL1:
          $BODY1
        case $VAL2:
          $BODY2
      }
    metadata:
      category: control-flow
      technology: [cfg, switch-statement]
      subcategory: [fallthrough, logic-error]
      cwe: ["CWE-484"]
      confidence: HIGH
      impact: HIGH

  # 6. Infinite recursion detection
  - id: infinite-recursion
    message: "Recursive call missing termination condition: may cause stack overflow"
    languages: [javascript, typescript]
    severity: ERROR
    pattern: |
      function $FUNC(...) {
        ...
        $FUNC(...);
        ...
      }
    metadata:
      category: control-flow
      technology: [cfg, recursion]
      subcategory: [termination, stack-overflow]
      cwe: ["CWE-674"]
      confidence: MEDIUM
      impact: HIGH

  # 7. Complex function detection (multiple return statements)
  - id: multiple-return-statements
    message: "Function contains multiple return statements: may make code difficult to understand and maintain"
    languages: [javascript, typescript]
    severity: INFO
    pattern: |
      function $FUNC(...) {
        ...
        if (...) {
          return ...;
        }
        ...
        if (...) {
          return ...;
        }
        ...
        return ...;
      }
    metadata:
      category: control-flow
      technology: [cfg, complexity]
      subcategory: [readability, maintainability]
      confidence: LOW
      impact: LOW

  # 8. Infinite loop detection
  - id: infinite-loop
    message: "Possible infinite loop: loop condition is always true"
    languages: [javascript, typescript]
    severity: WARNING
    pattern: |
      while (true) {
        ...
      }
    metadata:
      category: control-flow
      technology: [cfg, loop]
      subcategory: [infinite-loop, logic-error]
      confidence: HIGH
      impact: HIGH

  # 9. Unused loop variable detection
  - id: unused-loop-variable
    message: "Loop variable is not used within the loop body"
    languages: [javascript, typescript]
    severity: INFO
    pattern: |
      for ($VAR of $ITERABLE) {
        ...
      }
    metadata:
      category: control-flow
      technology: [cfg, loop]
      subcategory: [unused-variable, maintainability]
      confidence: LOW
      impact: LOW

  # 10. Empty loop body detection
  - id: empty-loop-body
    message: "Empty loop body: no operations within the loop body"
    languages: [javascript, typescript]
    severity: WARNING
    pattern: |
      for (...; ...; ...) {
      }
    metadata:
      category: control-flow
      technology: [cfg, loop]
      subcategory: [empty-body, logic-error]
      confidence: HIGH
      impact: MEDIUM